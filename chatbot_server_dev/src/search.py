from qdrant_client.http.models import Filter, FieldCondition, MatchValue
from src.qdrantdb.embedding import get_embedding_from_ollama
from src.qdrantdb.vector_db_client import VectorDBClient
import dotenv 
import os 
import requests

dotenv.load_dotenv()

endpoint = os.getenv("LLM_ENDPOINT")
model = os.getenv("MODEL_NAME")
headers = {
            "Content-Type": "application/json"
        }

vector_db_client = VectorDBClient()

def import_data(file):
    return

def classify_topic_with_llm(question: str) -> str:
    topics = [
        "to√°n H·ªçc",
        "english ",
        "v·∫≠t l√Ω",
        "h√≥a h·ªçc"
    ]
    system_prompt = f"""
    B·∫°n l√† m·ªôt tr·ª£ l√Ω to√°n h·ªçc. H√£y ph√¢n lo·∫°i b√†i to√°n sau th√†nh m·ªôt trong c√°c ch·ªß ƒë·ªÅ n·∫±m trong topic:
    {str(topics)}
    C√°c c√¢u h·ªèi li√™n quan ƒë·∫øn ƒë·∫°o h√†m, logarit, h√¨nh h·ªçc s·∫Ω l√† to√°n h·ªçc 
    C√°c c√¢u h·ªèi ch·ª©a nh·ªØng t·ª´ ti·∫øng anh s·∫Ω l√† li√™n quan ƒë·∫øn m√¥n ti·∫øng anh 
    Tr·∫£ l·ªùi **ch·ªâ t√™n ch·ªß ƒë·ªÅ**, kh√¥ng th√™m g√¨ kh√°c.
    """

    payload = {
            "model": model,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            "stream": False
        }


    response = requests.post(endpoint, json=payload, headers=headers)
    print(response.json())
    return response.json()["message"]["content"].strip().lower()


def reasoning_and_search(query: str, collection_name):
    topic = classify_topic_with_llm(query)
    topics = [
        "to√°n h·ªçc",
        "english ",
        "v·∫≠t l√Ω",
        "h√≥a h·ªçc"
    ]
    det = f"[üîç Topic Detected]: {topic}"

    if topic not in topics:
        # print("‚ùå C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn to√°n h·ªçc. Kh√¥ng th·ª±c hi·ªán t√¨m ki·∫øm.")
        return "kh√¥ng ph·∫£i m·ªôt c√¢u h·ªèi li√™n quan ƒë·∫øn c√°c m√¥n h·ªçc" + "\t" + det

    results = vector_db_client.search(
        query=query,
        collection_name=collection_name
    )

    return results + "\t" + det


# def test_classify_topic_and_reasoning_search():
#     test_cases = [
#         ("T√≠nh ƒë·∫°o h√†m c·ªßa h√†m s·ªë y = x^2 + 3x + 2", "gi·∫£i t√≠ch"),
#         ("Gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c hai x^2 - 4x + 4 = 0", "gi·∫£i t√≠ch"),
#         ("Ch√†o b·∫°n, h√¥m nay th·∫ø n√†o?", "none"),  # C√¢u h·ªèi kh√¥ng li√™n quan
#     ]

#     for query, expected_topic in test_cases:
#         print(f"Testing query: {query}")
#         topic = classify_topic_with_llm(query)
#         print(f"Detected topic: {topic}")
#         assert topic == expected_topic, f"Expected topic '{expected_topic}', got '{topic}'"

#         if topic == "none":
#             results = reasoning_and_search(query)
#             assert results == [], "Expected no search results for unrelated query"
#             print("Passed: No search for unrelated query.\n")
#         else:
#             results = reasoning_and_search(query)
#             print(f"Search returned {len(results)} results.")
#             assert isinstance(results, list), "Search results should be a list"
#             print("Passed: Search executed for related topic.\n")

# if __name__ == "__main__":
#     # Kh·ªüi t·∫°o instance vector_db c·ªßa b·∫°n ·ªü ƒë√¢y
#     test_classify_topic_and_reasoning_search()
