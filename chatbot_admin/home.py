import streamlit as st
from qdrant_client import QdrantClient
from qdrant_client.models import VectorParams, Distance

# K·∫øt n·ªëi t·ªõi Qdrant
client = QdrantClient(host="qdrant", port=6333)

st.set_page_config(page_title="Trang ch·ªß", page_icon="üè†")
st.title("üè† Qdrant Collection Manager")

# --- L·∫•y danh s√°ch collection ---
collections_response = client.get_collections()
collections = [c.name for c in collections_response.collections]

st.subheader("üìã Danh s√°ch c√°c collection hi·ªán c√≥:")
if collections:
    st.table(collections)
else:
    st.info("Kh√¥ng c√≥ collection n√†o hi·ªán t·∫°i.")

# --- T·∫°o collection m·ªõi ---
st.subheader("‚ûï Th√™m Collection M·ªõi")

with st.form("create_collection_form"):
    new_collection_name = st.text_input("T√™n collection m·ªõi", placeholder="vd: my_collection")
    distance_metric = st.selectbox("Kho·∫£ng c√°ch", ["Cosine", "Euclid", "Dot"])

    submitted = st.form_submit_button("T·∫°o collection")
    if submitted:
        if new_collection_name.strip() == "":
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n collection.")
        elif new_collection_name in collections:
            st.warning("‚ö†Ô∏è Collection ƒë√£ t·ªìn t·∫°i.")
        else:
            client.create_collection(
                collection_name=new_collection_name,
                vectors_config=VectorParams(
                    size=1024,
                    distance=Distance[distance_metric.upper()]
                )
            )
            st.success(f"‚úÖ Collection `{new_collection_name}` ƒë√£ ƒë∆∞·ª£c t·∫°o.")
            st.rerun()

# --- Xo√° collection ---
st.subheader("üóëÔ∏è Xo√° Collection")

collection_to_delete = st.selectbox("Ch·ªçn collection c·∫ßn xo√°", collections, key="delete_selector")

if st.button("‚ùå Xo√° collection"):
    try:
        client.delete_collection(collection_to_delete)
        st.success(f"‚úÖ ƒê√£ xo√° collection `{collection_to_delete}`")
        st.rerun()
    except Exception as e:
        st.error(f"‚ùå L·ªói khi xo√°: {e}")
