import streamlit as st
import pandas as pd
from qdrant_client import QdrantClient
from qdrant_client.models import PointStruct
from qdrant_client.models import PointIdsList

# K·∫øt n·ªëi Qdrant
client = QdrantClient(host="qdrant", port=6333)

collections_response = client.get_collections()
collections = [c.name for c in collections_response.collections]

if not collections:
    st.warning("‚ö†Ô∏è Kh√¥ng c√≥ collection n√†o trong Qdrant.")
    st.stop()

# --- T·∫°o selectbox ƒë·ªÉ ch·ªçn ---
selected_collection = st.selectbox("üì¶ Ch·ªçn collection:", collections)


st.title("üìä Xem v√† Ch·ªânh s·ª≠a ƒëi·ªÉm trong Qdrant")

# H√†m l·∫•y d·ªØ li·ªáu
def fetch_all_points(collection_name, batch_size=500):
    all_data = []
    offset = None

    while True:
        points, offset = client.scroll(
            collection_name=collection_name,
            limit=batch_size,
            with_payload=True,
            with_vectors=True,
            offset=offset
        )
        for point in points:
            data = {
                "id": point.id,
                "vector": point.vector,
                **point.payload
            }
            all_data.append(data)

        if offset is None:
            break

    return pd.DataFrame(all_data)

# L·∫•y d·ªØ li·ªáu
df = fetch_all_points(selected_collection)

# Hi·ªÉn th·ªã b·∫£ng c√≥ th·ªÉ ch·ªânh s·ª≠a
edited_df = st.data_editor(df, num_rows="dynamic", use_container_width=True)

# N√∫t l∆∞u thay ƒë·ªïi
if st.button("üíæ L∆∞u thay ƒë·ªïi v√†o Qdrant"):
    # Chuy·ªÉn c√°c d√≤ng trong dataframe th√†nh list of PointStruct
    try:
        points = []
        for _, row in edited_df.iterrows():
            # ƒê·∫£m b·∫£o "vector" l√† list float (tr∆∞·ªùng h·ª£p b·ªã ƒë·ªçc sai th√†nh chu·ªói)
            vector = row["vector"]
            if isinstance(vector, str):
                import ast
                vector = ast.literal_eval(vector)

            # B·ªè c√°c tr∆∞·ªùng kh√¥ng ph·∫£i payload (id, vector)
            payload = row.drop(["id", "vector"]).to_dict()

            points.append(
                PointStruct(
                    id=row["id"],
                    vector=vector,
                    payload=payload
                )
            )

        # Upsert l·∫°i v√†o Qdrant
        client.upsert(collection_name=selected_collection, points=points)
        st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o Qdrant!")

    except Exception as e:
        st.error(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu: {e}")



st.subheader("üóëÔ∏è Xo√° point theo ID")

delete_id = st.text_input("Nh·∫≠p ID c·ªßa point c·∫ßn xo√°")

if st.button("‚ùå Xo√° point"):
    if delete_id:

        # T·ª± ƒë·ªông chuy·ªÉn sang int n·∫øu c√≥ th·ªÉ
        point_id = int(delete_id) if delete_id.isdigit() else delete_id

        client.delete(
            collection_name=selected_collection,
            points_selector=PointIdsList(points=[point_id])
        )
        st.success(f"‚úÖ ƒê√£ xo√° point c√≥ ID = {point_id}")
        st.rerun()

    else:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID tr∆∞·ªõc khi xo√°.")